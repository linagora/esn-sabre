# Docker container for ESN Sabre testing
#
# Build:
# docker build -t esn_sabre_test -f Dockerfile.test .

FROM debian:trixie-slim
LABEL maintainer Linagora Folks <openpaas@linagora.com>

ENV PHPVERSION=8.4

# Copy PHP configuration files first (these rarely change)
ADD 20-apcu.ini /etc/php/${PHPVERSION}/fpm/conf.d/20-apcu.ini
ADD 05-opcache.ini /etc/php/${PHPVERSION}/fpm/conf.d/05-opcache.ini
ADD 05-opcache.ini /etc/php/${PHPVERSION}/cli/conf.d/05-opcache.ini

# Fix for CI environments with clock skew issues
RUN echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid-until

# Install runtime packages + build tools, compile mongodb extension, then remove build tools
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get -y upgrade && \
  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \
    # Runtime packages
    php${PHPVERSION}-fpm \
    php${PHPVERSION}-cli \
    php${PHPVERSION}-curl \
    php${PHPVERSION}-ldap \
    php${PHPVERSION}-bcmath \
    php${PHPVERSION}-mbstring \
    php${PHPVERSION}-zip \
    php${PHPVERSION}-xml \
    php-apcu \
    supervisor \
    nginx \
    ca-certificates \
    curl \
    # Build tools (temporary)
    php-pear \
    php${PHPVERSION}-dev \
    make \
    pkg-config \
    git && \
  # Compile MongoDB extension
  pecl install mongodb-1.15.0 && \
  echo "extension=mongodb.so" >> /etc/php/${PHPVERSION}/fpm/php.ini && \
  echo "extension=mongodb.so" >> /etc/php/${PHPVERSION}/cli/php.ini && \
  # Remove build tools to reduce image size
  apt-get purge -y php-pear php${PHPVERSION}-dev make pkg-config && \
  apt-get autoremove -y && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.pearrc

# Configure PHP (combine all sed commands)
RUN sed -i "s/;date.timezone =.*/date.timezone = UTC/" /etc/php/${PHPVERSION}/fpm/php.ini && \
  sed -i "s/;date.timezone =.*/date.timezone = UTC/" /etc/php/${PHPVERSION}/cli/php.ini && \
  sed -i -e "s/;daemonize\s*=\s*yes/daemonize = no/g" /etc/php/${PHPVERSION}/fpm/php-fpm.conf && \
  sed -i "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" /etc/php/${PHPVERSION}/fpm/php.ini && \
  sed -i -e "s/memory_limit\s*=\s*128M/memory_limit = 512M/g" /etc/php/${PHPVERSION}/fpm/php.ini && \
  sed -i "s/max_execution_time = 30/max_execution_time = 120/" /etc/php/${PHPVERSION}/fpm/php.ini && \
  sed -i "s|^listen = .*|listen = /var/run/php/php-fpm.sock|" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;listen.owner = www-data/listen.owner = www-data/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;listen.group = www-data/listen.group = www-data/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;listen.mode = 0660/listen.mode = 0660/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;listen.backlog = 511/listen.backlog = 4096/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/pm.max_children = 5/pm.max_children = 96/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/pm.start_servers = 2/pm.start_servers = 8/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/pm.max_spare_servers = 3/pm.max_spare_servers = 16/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;clear_env = no/clear_env = no/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  sed -i "s/;request_terminate_timeout = 0/request_terminate_timeout = 0/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf && \
  # Logs configuration
  sed -i "s/error_log = \/var\/log\/php${PHPVERSION}-fpm.log/error_log = \/proc\/self\/fd\/2/" /etc/php/${PHPVERSION}/fpm/php-fpm.conf && \
  sed -i "s/;catch_workers_output = yes/catch_workers_output = yes/" /etc/php/${PHPVERSION}/fpm/pool.d/www.conf

# Set up Nginx (combine RUN commands)
RUN echo "daemon off;" >> /etc/nginx/nginx.conf && \
    ln -sf /dev/stderr /var/log/nginx/error.log && \
    ln -sf /dev/stdout /var/log/nginx/access.log

RUN pecl install mongodb-2.1.4 \
    && echo "extension=mongodb.so" >> /etc/php/${PHPVERSION}/fpm/php.ini \
    && echo "extension=mongodb.so" >> /etc/php/${PHPVERSION}/cli/php.ini

# Set up Sabre DAV
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=bin --filename=composer

# Set up Nginx
RUN echo "daemon off;" >> /etc/nginx/nginx.conf
RUN ln -sf /dev/stderr /var/log/nginx/error.log
RUN ln -sf /dev/stdout /var/log/nginx/access.log

# Copy composer from official image
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

WORKDIR /var/www

# Copy application code
COPY . /var/www

# Install dependencies without dev packages (using install to respect composer.lock)
RUN git config --global --add safe.directory '/var/www/vendor/sabre/vobject' && \
    composer clearcache && \
    composer install --no-dev --optimize-autoloader --no-interaction && \
    # Clean up composer cache and remove git
    rm -rf /root/.composer/cache && \
    apt-get purge -y git && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Configure application
RUN cp -v docker/prepare/set_nginx_htpasswd.sh /root/set_nginx_htpasswd.sh && \
    cp -v docker/config/nginx.conf /etc/nginx/sites-available/default && \
    cp -v docker/supervisord.conf /etc/supervisor/conf.d/ && \
    rm -rf html && \
    chown -R www-data:www-data /var/www && \
    /root/set_nginx_htpasswd.sh && \
    mkdir -p /var/run/php

RUN git config --global --add safe.directory '/var/www/vendor/sabre/vobject'

RUN composer clearcache && composer update --dev

EXPOSE 80

CMD ["sh", "./scripts/start.sh"]
